{
  "name": "soda",
  "description": "Selenium RC Node Adapter (with Sauce Labs support)",
  "keywords": [
    "selenium",
    "saucelabs",
    "testing",
    "test",
    "tests"
  ],
  "version": "0.2.5",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@learnboost.com"
  },
  "main": "./lib/soda/index.js",
  "engines": {
    "node": ">= 0.2.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/LearnBoost/soda.git"
  },
  "readme": "\n# Soda\n\nSelenium Node Adapter. A light-weight Selenium RC client for [NodeJS](http://nodejs.org), with additional [Sauce Labs](http://saucelabs.com) integration for acceptance testing in the cloud.\n\n## Installation\n\nvia npm:\n\n    $ npm install soda\n\n## Authors\n\n  - TJ Holowaychuk ([visionmedia](http://github.com/visionmedia))\n  - Adam Christian ([admc](http://github.com/admc))\n  - Daniel Shaw ([dshaw](http://github.com/dshaw))\n\n## Running Examples\n\nThe examples provided in _./examples_ are intended to be run against Selenium RC, which can be downloaded [here](http://seleniumhq.org/projects/remote-control/). Once installed simply execute the following command to start the selenium server:\n\n    $ java -jar selenium-server.jar\n\nThen choose an example to run using soda:\n\n    $ node examples/google.js\n\n## Actions\n\n\"Selenese\" actions include commands such as _open_ and _type_. Every action has a corresponding `Client` method which accept a variable number of arguments followed by a callback `Function` which receives any potential `err`, the response `body`, and `response` object itself. \n\n    browser.session(function(err){\n      browser.open('/', function(err, body, res){\n        browser.type('q', 'Hello World', function(err, body, res){\n          browser.testComplete(function(){\n            \n          });\n        });\n      });\n    });\n\nBecause nested callbacks can quickly become overwhelming, Soda has optional chaining support by simply utilizing the `.chain` getter as shown below. If an exception is thrown in a callback, or a command fails then it will be passed to `end(err)`. The `.chain` getter should only be used once, activating the chaining api.\n\n    browser\n      .chain\n      .session()\n      .open('/')\n      .type('q', 'Hello World')\n      .end(function(err){\n        browser.testComplete(function() {\n          console.log('done');\n          if(err) throw err;\n        });\n      });\n\nWhen chaining successful commands may receive a callback, which is useful for custom assertions:\n\n    browser\n      .chain\n      .session()\n      .open('/')\n      .getTitle(function(title){\n        assert.equal('Hello World', title);\n      })\n      .end(function(err){\n        browser.testComplete(function() {\n          console.log('done');\n          if(err) throw err;\n        });\n      })\n\nWith the `.and()` method you can add additional commands to the queue. The callback accepts the client instance, which is also the value of \"this\".\n\nFor example you may want to authenticate a user, note we do _not_ use `.chain` or `.end()` again, this simply extends the current queue.\n\n    function login(user, pass) {\n      return function(browser) {\n        browser\n          .open('/login')\n          .type('username', name)\n          .type('password', pass)\n          .clickAndWait('login');\n      }\n    }\n\nWith this helper function we can now re-use this logic in several places, an express the tests in a more logical manor.\n\n    browser\n      .chain\n      .session()\n      .open('/')\n      .assertTitle('Something')\n      .and(login('foo', 'bar'))\n      .assertTitle('Foobar')\n      .and(login('someone', 'else'))\n      .assertTitle('Someone else')\n      .end(function(err){\n        browser.testComplete(function() {\n          console.log('done');\n          if(err) throw err;\n        });\n      });\n\n## Sauce Labs Videos &amp; Logs\n\nWhen a job is complete, you can request the log or flv video from Sauce Labs. To access the url for these resources you may use `SauceClient#videoUrl` or `SauceClient#logUrl`, for example:\n\n    ...\n    .end(function(err){\n      console.log(this.jobUrl)\n      console.log(this.videoUrl)\n      console.log(this.logUrl)\n    })\n\nSauce Labs also provides a script that you may embed in your CI server to display the video, accessible via `SauceClient#video`, which will yield something similar to:\n\n    <script src=\"http://saucelabs.com/video-embed/<job-id>.js?username=<username>&access_key=<access-key>\"/>\n\n## Selenium RC Example\n\n    var soda = require('soda')\n      , assert = require('assert');\n\n    var browser = soda.createClient({\n        host: 'localhost'\n      , port: 4444\n      , url: 'http://www.google.com'\n      , browser: 'firefox'\n    });\n\n    browser\n      .chain\n      .session()\n      .open('/')\n      .type('q', 'Hello World')\n      .clickAndWait('btnG')\n      .getTitle(function(title){\n        assert.ok(~title.indexOf('Hello World'))\n      })\n      .end(function(err){\n        browser.testComplete(function() {\n          console.log('done');\n          if(err) throw err;\n        });\n      });\n\n\n## Sauce Labs Example\n\n    var soda = require('soda')\n      , assert = require('assert');\n\n    var browser = soda.createSauceClient({\n        'url': 'http://sirrobertborden.ca.app.learnboost.com/'\n      , 'username': '<your username>'\n      , 'access-key': '<your api key>'\n      , 'os': 'Linux'\n      , 'browser': 'firefox'\n      , 'browser-version': '3.'\n      , 'max-duration': 300 // 5 minutes\n    });\n\n    // Log commands as they are fired\n    browser.on('command', function(cmd, args){\n      console.log(' \\x1b[33m%s\\x1b[0m: %s', cmd, args.join(', '));\n    });\n\n    browser\n      .chain\n      .session()\n      .setTimeout(8000)\n      .open('/')\n      .waitForPageToLoad(5000)\n      .clickAndWait('//input[@value=\"Submit\"]')\n      .clickAndWait('link=Settings')\n      .type('user[name][first]', 'TJ')\n      .clickAndWait('//input[@value=\"Save\"]')\n      .assertTextPresent('Account info updated')\n      .clickAndWait('link=Log out')\n      .testComplete()\n      .end(function(err){\n        browser.setContext('sauce:job-info={\"passed\": ' + (err === null) + '}', function(){\n          browser.testComplete(function(){\n            console.log(browser.jobUrl);\n            if (err) throw err;\n          });\n        });\n      });  \n\n## Creating Helpers\n\nKeep in mind you can extend the prototype as needed for your test. An example of this which we frequently use is `waitForDialog()`. Since the exports of `require('soda')` is the `Client` itself we can extend it as shown below, in our case waiting for an element with the class of \".dialog\" to be present.\n\n    soda.prototype.waitForDialog = function() {\n      return this.waitForElementPresent('css=.dialog');\n    };\n\n## Running The Test Suite\n\n First we need to start Selenium RC:\n \n     $ java -jar selenium-server.jar\n\n Then run:\n \n     $ make test\n\n## More Information\n\n  - Sauce Labs  [Supported Browsers](http://saucelabs.com/docs/ondemand/browsers/env/js/se1/mac)\n  - Introduction to [Selenese](http://seleniumhq.org/docs/02_selenium_basics.html)\n  - Selenium [Command Reference](http://release.seleniumhq.org/selenium-core/1.0.1/reference.html).\n\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "soda@0.2.5",
  "_from": "soda"
}
