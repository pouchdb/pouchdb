import request from './request';

import { generateErrorFromResponse } from 'pouchdb-errors';
import { clone } from 'pouchdb-utils';
import applyTypeToBuffer from './applyTypeToBuffer';
import defaultBody from './defaultBody';

function ajaxCore(options, callback) {

  options = clone(options);

  var defaultOptions = {
    method : "GET",
    headers: {},
    json: true,
    processData: true,
    timeout: 10000,
    cache: false
  };

  options = Object.assign(defaultOptions, options);


  function parseJsonMultipart(obj, boundary) {
    var results = [];
    var blocks = obj.split("--" + boundary);
    for (var i = 0; i < blocks.length; i++) {
      var block = blocks[i];
      var contentIndex = block.indexOf('Content-Type: application/json');
      if (contentIndex >= 0) {
        var jsonContent = block.substring(contentIndex + 'Content-Type: application/json'.length).trim();
        if (jsonContent.length > 0) {
          results.push(JSON.parse(jsonContent));
        }
      }
    }
    return results;
  }

  function onSuccess(obj, resp, cb) {
    if (!options.binary && options.json && typeof obj === 'string') {
      /* istanbul ignore next */
      try {
        if (options.acceptJsonMultipart) {
          var matches = resp.contentType.match(/(.*);\s*boundary="(.*)"/);
          if (matches && matches[1] === 'multipart/mixed') {
            obj = parseJsonMultipart(obj, matches[2]);
          } else {
            obj = JSON.parse(obj);
          }
        } else {
          obj = JSON.parse(obj);
        }
      } catch (e) {
        // Probably a malformed JSON from server
        return cb(e);
      }
    }
    if (Array.isArray(obj)) {
      obj = obj.map(function (v) {
        if (v.error || v.missing) {
          return generateErrorFromResponse(v);
        } else {
          return v;
        }
      });
    }
    if (options.binary) {
      applyTypeToBuffer(obj, resp);
    }
    cb(null, obj, resp);
  }

  if (options.json) {
    if (!options.binary) {
      options.headers.Accept = 'application/json';
      if (options.acceptJsonMultipart) {
          options.headers.Accept = 'application/json, multipart/mixed';
      }
    }
    options.headers['Content-Type'] = options.headers['Content-Type'] ||
      'application/json';
  }

  if (options.binary) {
    options.encoding = null;
    options.json = false;
  }

  if (!options.processData) {
    options.json = false;
  }

  return request(options, function (err, response, body) {

    if (err) {
      return callback(generateErrorFromResponse(err));
    }

    var error;
    var content_type = response.headers && response.headers['content-type'];
    var data = body || defaultBody();

    // CouchDB doesn't always return the right content-type for JSON data, so
    // we check for ^{ and }$ (ignoring leading/trailing whitespace)
    if (!options.binary && (options.json || !options.processData) &&
        typeof data !== 'object' &&
        (/json/.test(content_type) ||
         (/^[\s]*\{/.test(data) && /\}[\s]*$/.test(data)))) {
      try {
        data = JSON.parse(data.toString());
      } catch (e) {}
    }

    if (response.statusCode >= 200 && response.statusCode < 300) {
      onSuccess(data, response, callback);
    } else {
      error = generateErrorFromResponse(data);
      error.status = response.statusCode;
      callback(error);
    }
  });
}

export default ajaxCore;
