'use strict';

var IDB_NULL = Number.MIN_SAFE_INTEGER;
var IDB_FALSE = Number.MIN_SAFE_INTEGER + 1;
var IDB_TRUE = Number.MIN_SAFE_INTEGER + 2;

//
// TODO: this does a deep clone. Don't ship this without perf tuning. Check
// performance tests to see how this affects store. NB: we do need to do some
// kind of clone becaue this is the version that will be written to .data, based
// on what is written to .revs[..], and the latter should stay unmolested, as
// the former is only needed for indexing, and so it's perfect that this rewrite
// only happens on writes, to that property
//
function rewrite(data) {
  var clone = Array.isArray(data)
    ? Array.from(data)
    : Object.assign({}, data);

  Object.keys(clone).forEach(function (key) {
    if (clone[key] === null) {
      clone[key] = IDB_NULL;
    } else if (typeof clone[key] === 'boolean') {
      clone[key] = clone[key] ? IDB_TRUE : IDB_FALSE;
    } else if (typeof clone[key] === 'object') {
      clone[key] = rewrite(clone[key]);
    }
  });

  return clone;
}

export {
  IDB_NULL,
  IDB_TRUE,
  IDB_FALSE,
  rewrite,
};
