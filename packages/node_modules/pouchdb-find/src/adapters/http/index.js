import { createError, generateErrorFromResponse } from 'pouchdb-errors';
import { Headers } from 'pouchdb-fetch';
import massageCreateIndexRequest from '../../massageCreateIndexRequest';
import validateSelector from '../../validateSelector';

async function dbFetch(db, path, opts = { method: 'GET' }) {
  if (opts.body) {
    opts = {
      method: 'POST',
      body: JSON.stringify(opts.body),
      headers: new Headers({ 'Content-type': 'application/json' }),
    };
  }
  const response = await db.fetch(path, opts);
  let ok = response.ok;
  const json = await response.json()
    .catch((error) => {
      ok = false;
      return { error };
    });

  if (!ok) {
    json.status = response.status;
    const pouchError = createError(json);
    throw generateErrorFromResponse(pouchError);
  }

  return json;
}

function createIndex(db, requestDef, callback) {
  dbFetch(db, '_index', {
    body: massageCreateIndexRequest(requestDef)
  })
    .then((result) => {
      callback(null, result);
    })
    .catch(callback);
}

function find(db, requestDef, callback) {
  validateSelector(requestDef.selector, true);
  dbFetch(db, '_find', {
    body: requestDef
  })
    .then((result) => {
      callback(null, result);
    })
    .catch(callback);
}

function explain(db, requestDef, callback) {
  dbFetch(db, '_explain', {
    body: requestDef
  })
    .then((result) => {
      callback(null, result);
    })
    .catch(callback);
}

function getIndexes(db, callback) {
  return dbFetch(db, '_index')
    .then((result) => {
      callback(null, result);
    })
    .catch(callback);
}

function deleteIndex(db, indexDef, callback) {
  const ddoc = indexDef.ddoc;
  const type = indexDef.type || 'json';
  const name = indexDef.name;

  if (!ddoc) {
    return callback(new Error('you must provide an index\'s ddoc'));
  }

  if (!name) {
    return callback(new Error('you must provide an index\'s name'));
  }

  const url = '_index/' + [ddoc, type, name].map(encodeURIComponent).join('/');

  dbFetch(db, url, { method: 'DELETE' })
    .then((result) => {
      callback(null, result);
    })
    .catch(callback);
}

export {
  createIndex,
  find,
  getIndexes,
  deleteIndex,
  explain
};
