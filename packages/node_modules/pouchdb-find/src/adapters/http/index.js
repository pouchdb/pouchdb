import { generateErrorFromResponse } from 'pouchdb-errors';
import { Headers } from 'pouchdb-fetch';
import massageCreateIndexRequest from '../../massageCreateIndexRequest';
import validateSelector from '../../validateSelector';

async function dbFetch(db, path, opts) {
  opts.headers = new Headers({'Content-type': 'application/json'});
  const response = await db.fetch(path, opts);
  const { status, ok } = response;
  const json = await response.json();

  if (!ok) {
    json.status = status;
    throw generateErrorFromResponse(json);
  }

  return json;
}

function createIndex(db, requestDef) {
  requestDef = massageCreateIndexRequest(requestDef);
  return dbFetch(db, '_index', {
    method: 'POST',
    body: JSON.stringify(requestDef)
  });
}

function find(db, requestDef) {
  validateSelector(requestDef.selector, true);
  return dbFetch(db, '_find', {
    method: 'POST',
    body: JSON.stringify(requestDef)
  });
}

function explain(db, requestDef) {
  return dbFetch(db, '_explain', {
    method: 'POST',
    body: JSON.stringify(requestDef)
  });
}

function getIndexes(db) {
  return dbFetch(db, '_index', {
    method: 'GET'
  });
}

function deleteIndex(db, indexDef) {
  const ddoc = indexDef.ddoc;
  const type = indexDef.type || 'json';
  const name = indexDef.name;

  if (!ddoc) {
    throw new Error('you must provide an index\'s ddoc');
  }

  if (!name) {
    throw new Error('you must provide an index\'s name');
  }

  const url = '_index/' + [ddoc, type, name].map(encodeURIComponent).join('/');

  return dbFetch(db, url, { method: 'DELETE' });
}

export {
  createIndex,
  find,
  getIndexes,
  deleteIndex,
  explain
};
