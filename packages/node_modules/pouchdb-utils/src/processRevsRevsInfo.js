import { rootToLeaf } from 'pouchdb-merge';

/**
 * Adds _revisions to a doc.
 */
function processRevsRevsInfo(id, doc, rev_tree, opts) {
  const splittedRev = doc._rev.split('-');
  const revNo       = parseInt(splittedRev[0], 10);
  const revHash     = splittedRev[1];

  const paths = rootToLeaf(rev_tree);
  let path;

  for (let i = 0; i < paths.length; i++) {
    const currentPath = paths[i];
    const hashIndex = currentPath.ids.map(function (x) { return x.id; })
      .indexOf(revHash);
    const hashFoundAtRevPos = hashIndex === (revNo - 1);

    if (hashFoundAtRevPos || (!path && hashIndex !== -1)) {
      path = currentPath;
    }
  }

  /* istanbul ignore if */
  if (!path) {
    const err = new Error('invalid rev tree');
    err.docId = id;
    throw err;
  }

  const indexOfRev = path.ids.map(function (x) { return x.id; })
    .indexOf(doc._rev.split('-')[1]) + 1;
  const howMany = path.ids.length - indexOfRev;
  path.ids.splice(indexOfRev, howMany);
  path.ids.reverse();

  if (opts.revs) {
    doc._revisions = {
      start: (path.pos + path.ids.length) - 1,
      ids: path.ids.map(function (rev) {
        return rev.id;
      })
    };
  }
  if (opts.revs_info) {
    let pos =  path.pos + path.ids.length;
    doc._revs_info = path.ids.map(function (rev) {
      pos--;
      return {
        rev: pos + '-' + rev.id,
        status: rev.opts.status
      };
    });
  }
}

export default processRevsRevsInfo;
